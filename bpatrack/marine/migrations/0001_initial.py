# -*- coding: utf-8 -*-
# Generated by Django 1.9.2 on 2016-04-13 02:49
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('common', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Amplicon',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('extraction_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='Sample Extraction ID')),
                ('target', models.CharField(choices=[('16S', '16S'), ('ITS', 'ITS'), ('18S', '18S'), ('A16S', 'A16S')], max_length=4, verbose_name='Type')),
                ('metadata_filename', models.CharField(max_length=100, verbose_name='Metadata Filename')),
                ('comments', models.TextField(blank=True, null=True, verbose_name='Comments')),
                ('facility', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='marine_amplicon_facility', to='common.Facility', verbose_name='Sequencing Facility')),
            ],
            options={
                'verbose_name_plural': 'Amplicon Sequences',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ContextualOpenWater',
            fields=[
                ('bpa_id', models.IntegerField(primary_key=True, serialize=False, verbose_name='BPA ID')),
                ('date_sampled', models.DateField(verbose_name='Date Sampled')),
                ('time_sampled', models.TimeField(verbose_name='Time Sampled')),
                ('dept', models.IntegerField(verbose_name='Depth')),
                ('note', models.TextField(blank=True, null=True, verbose_name='Note')),
                ('host_species', models.TextField(blank=True, null=True, verbose_name='Host Species')),
                ('ph', models.IntegerField(blank=True, null=True, verbose_name='pH Level H20')),
                ('oxygen', models.IntegerField(blank=True, null=True, verbose_name='Oxygen (μmol/L) Lab')),
                ('oxygen_ctd', models.IntegerField(blank=True, null=True, verbose_name='Oxygen (ml/L) CDT')),
                ('silicate', models.IntegerField(blank=True, null=True, verbose_name='Silicate (μmol/L)')),
                ('nitrate', models.IntegerField(blank=True, null=True, verbose_name='Nitrate/Nitrite (μmol/L)')),
                ('phosphate', models.IntegerField(blank=True, null=True, verbose_name='Phosphate (μmol/L)')),
                ('ammonium', models.IntegerField(blank=True, null=True, verbose_name='Ammonium (μmol/L)')),
                ('co2_total', models.IntegerField(blank=True, null=True, verbose_name='Total CO2 (μmol/kg)')),
                ('alkalinity_total', models.IntegerField(blank=True, null=True, verbose_name='Total alkalinity (μmol/kg)')),
                ('temperature', models.IntegerField(blank=True, null=True, verbose_name='Temperature [ITS-90, deg C]')),
                ('conductivity', models.IntegerField(blank=True, null=True, verbose_name='Conductivity [S/m]')),
                ('fluorescence', models.IntegerField(blank=True, null=True, verbose_name='Fluorescence, Wetlab ECO-AFL/FL [mg/m^3]')),
                ('turbitity', models.IntegerField(blank=True, null=True, verbose_name='Turbidity (Upoly 0, WET Labs FLNTURT)')),
                ('salinity', models.IntegerField(blank=True, null=True, verbose_name='Salinity [PSU] CTD')),
                ('density', models.IntegerField(blank=True, null=True, verbose_name='Density [density, Kg/m^3]')),
                ('tss', models.IntegerField(blank=True, null=True, verbose_name='TSS [mg/L]')),
                ('inorganic_fraction', models.IntegerField(blank=True, null=True, verbose_name='Inorganic Fraction [mg/L]')),
                ('organic_fraction', models.IntegerField(blank=True, null=True, verbose_name='Organic Fraction [mg/L]')),
                ('secchi_depth', models.IntegerField(blank=True, null=True, verbose_name='Secchi Depth (m)')),
                ('biomass', models.IntegerField(blank=True, null=True, verbose_name='Biomass (mg/m3)')),
                ('allo', models.IntegerField(blank=True, null=True, verbose_name='ALLO [mg/m3]')),
                ('alpha_beta_car', models.IntegerField(blank=True, null=True, verbose_name='ALPHA_BETA_CAR [mg/m3]')),
                ('nth', models.IntegerField(blank=True, null=True, verbose_name='NTH [mg/m3]')),
                ('asta', models.IntegerField(blank=True, null=True, verbose_name='ASTA [mg/m3]')),
                ('beta_beta_car', models.IntegerField(blank=True, null=True, verbose_name='BETA_BETA_CAR [mg/m3]')),
                ('beta_epi_car', models.IntegerField(blank=True, null=True, verbose_name='BETA_EPI_CAR [mg/m3]')),
                ('but_fuco', models.IntegerField(blank=True, null=True, verbose_name='BUT_FUCO [mg/m3]')),
                ('cantha', models.IntegerField(blank=True, null=True, verbose_name='CANTHA [mg/m3]')),
                ('cphl_a', models.IntegerField(blank=True, null=True, verbose_name='CPHL_A [mg/m3] ')),
                ('cphl_b', models.IntegerField(blank=True, null=True, verbose_name='CPHL_B [mg/m3]')),
                ('cphl_c1c2', models.IntegerField(blank=True, null=True, verbose_name='CPHL_C1C2 [mg/m3]')),
                ('cphl_c1', models.IntegerField(blank=True, null=True, verbose_name='CPHL_C1 [mg/m3]')),
                ('cphl_c2', models.IntegerField(blank=True, null=True, verbose_name='CPHL_C2 [mg/m3]')),
                ('cphl_c3', models.IntegerField(blank=True, null=True, verbose_name='CPHL_C3 [mg/m3]')),
                ('cphlide_a', models.IntegerField(blank=True, null=True, verbose_name='CPHLIDE_A [mg/m3]')),
                ('diadchr', models.IntegerField(blank=True, null=True, verbose_name='DIADCHR [mg/m3]')),
                ('diadino', models.IntegerField(blank=True, null=True, verbose_name='DIADINO [mg/m3]')),
                ('diato', models.IntegerField(blank=True, null=True, verbose_name='DIATO [mg/m3]')),
                ('dino', models.IntegerField(blank=True, null=True, verbose_name='DINO [mg/m3]')),
                ('dv_cphl_a_and_cphl_a', models.IntegerField(blank=True, null=True, verbose_name='DV_CPHL_A_and_CPHL_A [mg/m3]')),
                ('dv_cphl_a', models.IntegerField(blank=True, null=True, verbose_name='DV_CPHL_A [mg/m3]')),
                ('dv_cphl_b_and_cphl_b', models.IntegerField(blank=True, null=True, verbose_name='DV_CPHL_B_and_CPHL_B [mg/m3]')),
                ('dv_cphl_b', models.IntegerField(blank=True, null=True, verbose_name='DV_CPHL_B [mg/m3]')),
                ('echin', models.IntegerField(blank=True, null=True, verbose_name='ECHIN [mg/m3]')),
                ('fuco', models.IntegerField(blank=True, null=True, verbose_name='FUCO [mg/m3]')),
                ('gyro', models.IntegerField(blank=True, null=True, verbose_name='GYRO [mg/m3]')),
                ('hex_fuco', models.IntegerField(blank=True, null=True, verbose_name='HEX_FUCO [mg/m3]')),
                ('keto_hex_fuco', models.IntegerField(blank=True, null=True, verbose_name='KETO_HEX_FUCO [mg/m3]')),
                ('lut', models.IntegerField(blank=True, null=True, verbose_name='LUT [mg/m3]')),
                ('lyco', models.IntegerField(blank=True, null=True, verbose_name='LYCO [mg/m3]')),
                ('mg_dvp', models.IntegerField(blank=True, null=True, verbose_name='MG_DVP [mg/m3]')),
                ('neo', models.IntegerField(blank=True, null=True, verbose_name='NEO [mg/m3]')),
                ('perid', models.IntegerField(blank=True, null=True, verbose_name='PERID [mg/m3]')),
                ('phide_a', models.IntegerField(blank=True, null=True, verbose_name='PHIDE_A [mg/m3]')),
                ('phytin_a', models.IntegerField(blank=True, null=True, verbose_name='PHYTIN_A [mg/m3]')),
                ('phytin_b', models.IntegerField(blank=True, null=True, verbose_name='PHYTIN_B [mg/m3]')),
                ('pras', models.IntegerField(blank=True, null=True, verbose_name='PRAS [mg/m3] ')),
                ('pyrophide_a', models.IntegerField(blank=True, null=True, verbose_name='PYROPHIDE_A [mg/m3]')),
                ('pyrophytin_a', models.IntegerField(blank=True, null=True, verbose_name='PYROPHYTIN_A [mg/m3]')),
                ('viola', models.IntegerField(blank=True, null=True, verbose_name='VIOLA [mg/m3]')),
                ('zea', models.IntegerField(blank=True, null=True, verbose_name='ZEA [mg/m3]')),
                ('site', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='common.Site')),
            ],
            options={
                'verbose_name_plural': 'Open Water Contextual Data',
                'verbose_name': 'Open Water Contextual Data',
            },
        ),
        migrations.CreateModel(
            name='ContextualPelagic',
            fields=[
                ('bpa_id', models.IntegerField(primary_key=True, serialize=False, verbose_name='BPA ID')),
                ('date_sampled', models.DateField(verbose_name='Date Sampled')),
                ('time_sampled', models.TimeField(verbose_name='Time Sampled')),
                ('dept', models.IntegerField(verbose_name='Depth')),
                ('note', models.TextField(blank=True, null=True, verbose_name='Note')),
                ('host_species', models.TextField(blank=True, null=True, verbose_name='Host Species')),
                ('ph', models.IntegerField(blank=True, null=True, verbose_name='pH Level H20')),
                ('oxygen', models.IntegerField(blank=True, null=True, verbose_name='Oxygen (μmol/L) Lab')),
                ('oxygen_ctd', models.IntegerField(blank=True, null=True, verbose_name='Oxygen (ml/L) CDT')),
                ('nitrate', models.IntegerField(blank=True, null=True, verbose_name='Nitrate/Nitrite (μmol/L)')),
                ('phosphate', models.IntegerField(blank=True, null=True, verbose_name='Phosphate (μmol/L)')),
                ('ammonium', models.IntegerField(blank=True, null=True, verbose_name='Ammonium (μmol/L)')),
                ('co2_total', models.IntegerField(blank=True, null=True, verbose_name='Total CO2 (μmol/kg)')),
                ('alkalinity_total', models.IntegerField(blank=True, null=True, verbose_name='Total alkalinity (μmol/kg)')),
                ('temperature', models.IntegerField(blank=True, null=True, verbose_name='Temperature [ITS-90, deg C]')),
                ('conductivity', models.IntegerField(blank=True, null=True, verbose_name='Conductivity [S/m]')),
                ('turbitity', models.IntegerField(blank=True, null=True, verbose_name='Turbidity (Upoly 0, WET Labs FLNTURT)')),
                ('salinity', models.IntegerField(blank=True, null=True, verbose_name='Salinity [PSU] Laboratory')),
                ('microbial_abandance', models.IntegerField(blank=True, null=True, verbose_name='Microbial abundance (cells per ml)')),
                ('chlorophyl', models.IntegerField(blank=True, null=True, verbose_name='Chlorophyll a (μg/L)')),
                ('carbon_total', models.IntegerField(blank=True, null=True, verbose_name='% total carbon')),
                ('inorganic_carbon_total', models.IntegerField(blank=True, null=True, verbose_name='% total inorganc carbon')),
                ('flux', models.IntegerField(blank=True, null=True, verbose_name='Light intensity (lux)')),
                ('site', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='common.Site')),
            ],
            options={
                'verbose_name_plural': 'Pelagic marine Contextual Data',
                'verbose_name': 'Pelagic marine Contextual Data',
            },
        ),
        migrations.CreateModel(
            name='Coral',
            fields=[
                ('bpa_id', models.IntegerField(primary_key=True, serialize=False, verbose_name='BPA ID')),
                ('date_sampled', models.DateField(verbose_name='Date Sampled')),
                ('time_sampled', models.TimeField(verbose_name='Time Sampled')),
                ('dept', models.IntegerField(verbose_name='Depth')),
                ('note', models.TextField(blank=True, null=True, verbose_name='Note')),
                ('pam', models.DecimalField(decimal_places=6, max_digits=9, verbose_name='Pulse amplitude modulated (PAM)')),
                ('fluoro', models.DecimalField(decimal_places=6, max_digits=9, verbose_name='Fluorometer Measurement')),
                ('host_state', models.TextField(verbose_name='Host State')),
                ('host_abundance', models.DecimalField(decimal_places=6, max_digits=9, verbose_name='Host Abundance')),
                ('site', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='common.Site')),
            ],
            options={
                'verbose_name_plural': 'Coral Contextual Data',
                'verbose_name': 'Coral Contextual Data',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Metagenomic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('extraction_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='Sample Extraction ID')),
                ('metadata_filename', models.CharField(max_length=100, verbose_name='Metadata Filename')),
                ('comments', models.TextField(blank=True, null=True, verbose_name='Comments')),
                ('facility', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='marine_metagenomic_facility', to='common.Facility', verbose_name='Sequencing Facility')),
            ],
            options={
                'verbose_name_plural': 'Metagenomic Sequences',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SampleStateTrack',
            fields=[
                ('extraction_id', models.CharField(max_length=100, primary_key=True, serialize=False, verbose_name='Sample Extraction ID')),
                ('quality_check_preformed', models.BooleanField(default=False, verbose_name='Quality Checked')),
                ('metagenomics_data_generated', models.BooleanField(default=False, verbose_name='Metagenomics Data Generated')),
                ('amplicon_16s_data_generated', models.BooleanField(default=False, verbose_name='Amplicon 16S Data Generated')),
                ('amplicon_18s_data_generated', models.BooleanField(default=False, verbose_name='Amplicon 18S Data Generated')),
                ('amplicon_ITS_data_generated', models.BooleanField(default=False, verbose_name='Amplicon ITS Data Generated')),
                ('minimum_contextual_data_received', models.BooleanField(default=False, verbose_name='Minimum Contextual Data Received')),
                ('full_contextual_data_received', models.BooleanField(default=False, verbose_name='Full Contextual Data Received')),
            ],
            options={
                'verbose_name': 'Sample State Track Log',
            },
        ),
        migrations.CreateModel(
            name='SeaGrass',
            fields=[
                ('bpa_id', models.IntegerField(primary_key=True, serialize=False, verbose_name='BPA ID')),
                ('date_sampled', models.DateField(verbose_name='Date Sampled')),
                ('time_sampled', models.TimeField(verbose_name='Time Sampled')),
                ('dept', models.IntegerField(verbose_name='Depth')),
                ('note', models.TextField(blank=True, null=True, verbose_name='Note')),
                ('pam', models.DecimalField(decimal_places=6, max_digits=9, verbose_name='Pulse amplitude modulated (PAM)')),
                ('fluoro', models.DecimalField(decimal_places=6, max_digits=9, verbose_name='Fluorometer Measurement')),
                ('host_state', models.TextField(verbose_name='Host State')),
                ('host_abundance', models.DecimalField(decimal_places=6, max_digits=9, verbose_name='Host Abundance')),
                ('site', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='common.Site')),
            ],
            options={
                'verbose_name_plural': 'Seagrass Contextual Data',
                'verbose_name': 'Seagrass Contextual Data',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SeaWeed',
            fields=[
                ('bpa_id', models.IntegerField(primary_key=True, serialize=False, verbose_name='BPA ID')),
                ('date_sampled', models.DateField(verbose_name='Date Sampled')),
                ('time_sampled', models.TimeField(verbose_name='Time Sampled')),
                ('dept', models.IntegerField(verbose_name='Depth')),
                ('note', models.TextField(blank=True, null=True, verbose_name='Note')),
                ('pam', models.DecimalField(decimal_places=6, max_digits=9, verbose_name='Pulse amplitude modulated (PAM)')),
                ('fluoro', models.DecimalField(decimal_places=6, max_digits=9, verbose_name='Fluorometer Measurement')),
                ('host_state', models.TextField(verbose_name='Host State')),
                ('host_abundance', models.DecimalField(decimal_places=6, max_digits=9, verbose_name='Host Abundance')),
                ('site', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='common.Site')),
            ],
            options={
                'verbose_name_plural': 'Seaweed Contextual Data',
                'verbose_name': 'Seaweed Contextual Data',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Sediment',
            fields=[
                ('bpa_id', models.IntegerField(primary_key=True, serialize=False, verbose_name='BPA ID')),
                ('date_sampled', models.DateField(verbose_name='Date Sampled')),
                ('time_sampled', models.TimeField(verbose_name='Time Sampled')),
                ('dept', models.IntegerField(verbose_name='Depth')),
                ('note', models.TextField(blank=True, null=True, verbose_name='Note')),
                ('host_species', models.TextField(blank=True, null=True, verbose_name='Host Species')),
                ('carbon', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='% total carbon')),
                ('sediment', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='% fine sediment')),
                ('nitrogen', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='% total nitrogen')),
                ('phosphorous', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='% total phosphorous')),
                ('sedimentation_rate', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='sedimentation rate (g /(cm2 x y)r)')),
                ('site', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='common.Site')),
            ],
            options={
                'verbose_name_plural': 'Sediment Contextual Data',
                'verbose_name': 'Sediment Contextual Data',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Sponge',
            fields=[
                ('bpa_id', models.IntegerField(primary_key=True, serialize=False, verbose_name='BPA ID')),
                ('date_sampled', models.DateField(verbose_name='Date Sampled')),
                ('time_sampled', models.TimeField(verbose_name='Time Sampled')),
                ('dept', models.IntegerField(verbose_name='Depth')),
                ('note', models.TextField(blank=True, null=True, verbose_name='Note')),
                ('host_state', models.TextField(verbose_name='Host State')),
                ('host_abundance', models.DecimalField(decimal_places=6, max_digits=9, verbose_name='Host Abundance')),
                ('site', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='common.Site')),
            ],
            options={
                'verbose_name_plural': 'Sponge Contextual Data',
                'verbose_name': 'Sponge Contextual Data',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TransferLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transfer_to_facility_date', models.DateField(verbose_name='Transfer to Facility Date')),
                ('description', models.CharField(max_length=100, verbose_name='Description')),
                ('data_type', models.CharField(max_length=50, verbose_name='Data Type')),
                ('folder_name', models.CharField(max_length=100, verbose_name='Folder')),
                ('transfer_to_archive_date', models.DateField(verbose_name='Transfer to Archive Date')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('ticket_url', models.URLField(verbose_name='Dataset')),
                ('downloads_url', models.URLField(verbose_name='Downloads')),
                ('facility', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='marine_transferlog_facility', to='common.Facility', verbose_name='Sequencing Facility')),
            ],
            options={
                'verbose_name_plural': 'Transfers',
                'verbose_name': 'Transfer Log',
                'abstract': False,
            },
        ),
    ]
