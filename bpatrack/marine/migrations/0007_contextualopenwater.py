# -*- coding: utf-8 -*-
# Generated by Django 1.9.2 on 2016-03-14 07:56
from __future__ import unicode_literals

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('marine', '0006_auto_20160314_0807'),
    ]

    operations = [
        migrations.CreateModel(
            name='ContextualOpenWater',
            fields=[
                ('bpa_id', models.IntegerField(primary_key=True, serialize=False, verbose_name='BPA ID')),
                ('date_sampled', models.DateField(verbose_name='Date Sampled')),
                ('time_sampled', models.TimeField(verbose_name='Time Sampled')),
                ('lat', models.DecimalField(decimal_places=6, max_digits=9, verbose_name='Latitude')),
                ('lon', models.DecimalField(decimal_places=6, max_digits=9, verbose_name='Longitude')),
                ('dept', models.IntegerField(verbose_name='Depth')),
                ('location_description', models.TextField(verbose_name='Location Description')),
                ('note', models.TextField(blank=True, null=True, verbose_name='Note')),
                ('host_species', models.TextField(blank=True, null=True, verbose_name='Host Species')),
                ('ph', models.IntegerField(blank=True, null=True, verbose_name='pH Level H20')),
                ('oxygen', models.IntegerField(blank=True, null=True, verbose_name='Oxygen (μmol/L) Lab')),
                ('oxygen_ctd', models.IntegerField(blank=True, null=True, verbose_name='Oxygen (ml/L) CDT')),
                ('silicate', models.IntegerField(blank=True, null=True, verbose_name='Silicate (μmol/L)')),
                ('nitrate', models.IntegerField(blank=True, null=True, verbose_name='Nitrate/Nitrite (μmol/L)')),
                ('phosphate', models.IntegerField(blank=True, null=True, verbose_name='Phosphate (μmol/L)')),
                ('ammonium', models.IntegerField(blank=True, null=True, verbose_name='Ammonium (μmol/L)')),
                ('co2_total', models.IntegerField(blank=True, null=True, verbose_name='Total CO2 (μmol/kg)')),
                ('alkalinity_total', models.IntegerField(blank=True, null=True, verbose_name='Total alkalinity (μmol/kg)')),
                ('temperature', models.IntegerField(blank=True, null=True, verbose_name='Temperature [ITS-90, deg C]')),
                ('conductivity', models.IntegerField(blank=True, null=True, verbose_name='Conductivity [S/m]')),
                ('fluorescence', models.IntegerField(blank=True, null=True, verbose_name='Fluorescence, Wetlab ECO-AFL/FL [mg/m^3]')),
                ('turbitity', models.IntegerField(blank=True, null=True, verbose_name='Turbidity (Upoly 0, WET Labs FLNTURT)')),
                ('salinity', models.IntegerField(blank=True, null=True, verbose_name='Salinity [PSU] CTD')),
                ('density', models.IntegerField(blank=True, null=True, verbose_name='Density [density, Kg/m^3]')),
                ('tss', models.IntegerField(blank=True, null=True, verbose_name='TSS [mg/L]')),
                ('inorganic_fraction', models.IntegerField(blank=True, null=True, verbose_name='Inorganic Fraction [mg/L]')),
                ('organic_fraction', models.IntegerField(blank=True, null=True, verbose_name='Organic Fraction [mg/L]')),
                ('secchi_depth', models.IntegerField(blank=True, null=True, verbose_name='Secchi Depth (m)')),
                ('biomass', models.IntegerField(blank=True, null=True, verbose_name='Biomass (mg/m3)')),
                ('allo', models.IntegerField(blank=True, null=True, verbose_name='ALLO [mg/m3]')),
                ('alpha_beta_car', models.IntegerField(blank=True, null=True, verbose_name='ALPHA_BETA_CAR [mg/m3]')),
                ('nth', models.IntegerField(blank=True, null=True, verbose_name='NTH [mg/m3]')),
                ('asta', models.IntegerField(blank=True, null=True, verbose_name='ASTA [mg/m3]')),
                ('beta_beta_car', models.IntegerField(blank=True, null=True, verbose_name='BETA_BETA_CAR [mg/m3]')),
                ('beta_epi_car', models.IntegerField(blank=True, null=True, verbose_name='BETA_EPI_CAR [mg/m3]')),
                ('but_fuco', models.IntegerField(blank=True, null=True, verbose_name='BUT_FUCO [mg/m3]')),
                ('cantha', models.IntegerField(blank=True, null=True, verbose_name='CANTHA [mg/m3]')),
                ('cphl_a', models.IntegerField(blank=True, null=True, verbose_name='CPHL_A [mg/m3] ')),
                ('cphl_b', models.IntegerField(blank=True, null=True, verbose_name='CPHL_B [mg/m3]')),
                ('cphl_c1c2', models.IntegerField(blank=True, null=True, verbose_name='CPHL_C1C2 [mg/m3]')),
                ('cphl_c1', models.IntegerField(blank=True, null=True, verbose_name='CPHL_C1 [mg/m3]')),
                ('cphl_c2', models.IntegerField(blank=True, null=True, verbose_name='CPHL_C2 [mg/m3]')),
                ('cphl_c3', models.IntegerField(blank=True, null=True, verbose_name='CPHL_C3 [mg/m3]')),
                ('cphlide_a', models.IntegerField(blank=True, null=True, verbose_name='CPHLIDE_A [mg/m3]')),
                ('diadchr', models.IntegerField(blank=True, null=True, verbose_name='DIADCHR [mg/m3]')),
                ('diadino', models.IntegerField(blank=True, null=True, verbose_name='DIADINO [mg/m3]')),
                ('diato', models.IntegerField(blank=True, null=True, verbose_name='DIATO [mg/m3]')),
                ('dino', models.IntegerField(blank=True, null=True, verbose_name='DINO [mg/m3]')),
                ('dv_cphl_a_and_cphl_a', models.IntegerField(blank=True, null=True, verbose_name='DV_CPHL_A_and_CPHL_A [mg/m3]')),
                ('dv_cphl_a', models.IntegerField(blank=True, null=True, verbose_name='DV_CPHL_A [mg/m3]')),
                ('dv_cphl_b_and_cphl_b', models.IntegerField(blank=True, null=True, verbose_name='DV_CPHL_B_and_CPHL_B [mg/m3]')),
                ('dv_cphl_b', models.IntegerField(blank=True, null=True, verbose_name='DV_CPHL_B [mg/m3]')),
                ('echin', models.IntegerField(blank=True, null=True, verbose_name='ECHIN [mg/m3]')),
                ('fuco', models.IntegerField(blank=True, null=True, verbose_name='FUCO [mg/m3]')),
                ('gyro', models.IntegerField(blank=True, null=True, verbose_name='GYRO [mg/m3]')),
                ('hex_fuco', models.IntegerField(blank=True, null=True, verbose_name='HEX_FUCO [mg/m3]')),
                ('keto_hex_fuco', models.IntegerField(blank=True, null=True, verbose_name='KETO_HEX_FUCO [mg/m3]')),
                ('lut', models.IntegerField(blank=True, null=True, verbose_name='LUT [mg/m3]')),
                ('lyco', models.IntegerField(blank=True, null=True, verbose_name='LYCO [mg/m3]')),
                ('mg_dvp', models.IntegerField(blank=True, null=True, verbose_name='MG_DVP [mg/m3]')),
                ('neo', models.IntegerField(blank=True, null=True, verbose_name='NEO [mg/m3]')),
                ('perid', models.IntegerField(blank=True, null=True, verbose_name='PERID [mg/m3]')),
                ('phide_a', models.IntegerField(blank=True, null=True, verbose_name='PHIDE_A [mg/m3]')),
                ('phytin_a', models.IntegerField(blank=True, null=True, verbose_name='PHYTIN_A [mg/m3]')),
                ('phytin_b', models.IntegerField(blank=True, null=True, verbose_name='PHYTIN_B [mg/m3]')),
                ('pras', models.IntegerField(blank=True, null=True, verbose_name='PRAS [mg/m3] ')),
                ('pyrophide_a', models.IntegerField(blank=True, null=True, verbose_name='PYROPHIDE_A [mg/m3]')),
                ('pyrophytin_a', models.IntegerField(blank=True, null=True, verbose_name='PYROPHYTIN_A [mg/m3]')),
                ('viola', models.IntegerField(blank=True, null=True, verbose_name='VIOLA [mg/m3]')),
                ('zea', models.IntegerField(blank=True, null=True, verbose_name='ZEA [mg/m3]')),
            ],
            options={
                'verbose_name': 'Open Water Contextual Data',
            },
        ),
    ]
